#include <iostream>

using namespace std;


void heapify(int arr[], int n, int index) {
    int largest = index;       
    int left = 2 * index + 1;  
    int right = 2 * index + 2; 

    if (left < n && arr[left] > arr[largest])
        largest = left;

    if (right < n && arr[right] > arr[largest])
        largest = right;

    if (largest != index) {
        swap(arr[index], arr[largest]);

        heapify(arr, n, largest);
    }
}


void heapSort(int arr[], int n) {
    
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) {
        
        swap(arr[0], arr[i]);

        heapify(arr, i, 0);

        cout << "\t\tPass " << n - i << ": ";
        for (int j = 0; j < n; j++) {
            cout << arr[j] << " ";
        }
        cout << endl;
    }
}

int main() {
    
    int n;
    cout << "\t------------------------------------------------\n";
    cout << "\t\tEnter the number of elements: ";
    cin >> n;

    int binaryTree[n];
    cout << "\t\tEnter the elements of the array: ";
    for (int i = 0; i < n; i++) {
        cin >> binaryTree[i];
    }
    cout << "\t------------------------------------------------\n";

    cout << "\t------------------------------------------------\n";
    cout << "\t\tOriginal Array: ";
    for (int i = 0; i < n; i++) {
        cout << binaryTree[i] << " ";
    }
    cout << endl;

    heapSort(binaryTree, n);

    cout << "\t------------------------------------------------\n";
    cout << "\n\t\tSorted Array: ";
    for (int i = 0; i < n; i++) {
        cout << binaryTree[i] << " ";
    }
    cout << "\n\n\t------------------------------------------------\n";

    return 0;
}
/*

                        xxxx OUTPUT xxxx

        ------------------------------------------------
                Enter the number of elements: 5
                Enter the elements of the array: 3 8 4 9 1
        ------------------------------------------------
        ------------------------------------------------
                Original Array: 3 8 4 9 1 
                Pass 1: 8 3 4 1 9 
                Pass 2: 4 3 1 8 9 
                Pass 3: 3 1 4 8 9 
                Pass 4: 1 3 4 8 9 
        ------------------------------------------------

                Sorted Array: 1 3 4 8 9 

        ------------------------------------------------
*/
