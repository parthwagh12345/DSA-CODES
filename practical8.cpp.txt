#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

struct Edge {
    int destination;
    int weight;
};

struct Node {
    int id;
    vector<Edge> edges;
};

void addEdge(vector<Node>& graph, int source, int destination, int weight) {
    Edge edge;
    edge.destination = destination;
    edge.weight = weight;
    graph[source].edges.push_back(edge);
}

void dijkstra(vector<Node>& graph, int source) {
    int n = graph.size();
    vector<int> distance(n, INT_MAX);
    distance[source] = 0;

    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    pq.push({0, source});

    while (!pq.empty()) {
        int u = pq.top().second;
        pq.pop();

        for (const Edge& edge : graph[u].edges) {
            int v = edge.destination;
            int w = edge.weight;
            if (distance[u] + w < distance[v]) {
                distance[v] = distance[u] + w;
                pq.push({distance[v], v});
            }
        }
    }

    cout << "Shortest distances from source " << source << ":\n";
    for (int i = 0; i < n; ++i) {
        cout << "To " << i << ": " << distance[i] << "\n";
    }
}

int main() {
    int numNodes, numEdges;
    cout << "------------------------------------"<<endl; 
    cout << "Enter the number of nodes: ";
    cin >> numNodes;

    vector<Node> graph(numNodes);

    cout << "Enter the number of edges: ";
    cin >> numEdges;
    cout << "------------------------------------"<<endl; 

    cout << "Enter edges (source destination weight):\n";
    for (int i = 0; i < numEdges; ++i) {
        int source, destination, weight;
        cin >> source >> destination >> weight;
        addEdge(graph, source, destination, weight);
    }

    int sourceNode;
    cout << "------------------------------------"<<endl; 
    cout << "Enter the source node: ";
    cin >> sourceNode;

    dijkstra(graph, sourceNode);

    return 0;
}
/*

            ___OUTPUT___
        
------------------------------------
Enter the number of nodes: 5
Enter the number of edges: 7
------------------------------------
Enter edges (source destination weight):
0 1 2
0 2 4
1 2 1
1 3 7
2 3 3
2 4 5
3 4 2
------------------------------------
Enter the source node: 0
Shortest distances from source 0:
To 0: 0
To 1: 2
To 2: 3
To 3: 6
To 4: 8

*/
